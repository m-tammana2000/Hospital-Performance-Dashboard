create database hospital;
use hospital;
select * from doctor_patients;
/*
15.	Identify the top 5 doctors who generated the most revenue but had the fewest patients. (SQL)
16.	Find the department where the average waiting time has decreased over three consecutive months. (SQL)
17.	Determine the ratio of male to female patients for each doctor and rank the doctors based on this ratio. (SQL)
18.	Calculate the average satisfaction score of patients for each doctor based on their visits. (SQL)
19.	Find doctors who have treated patients from different races and calculate the diversity of their patient base. (SQL)
20.	Calculate the ratio of total bills generated by male patients to female patients or each department. (SQL)
21.	Update the patient satisfaction score for all patients who visited the "General Practice" department and had a waiting time of more than 30 minutes. Increase their satisfaction score by 2 points, but ensure that the satisfaction score does not exceed 10. (SQL)
*/

select DoctorName, sum(AppointmentFees) as total_revenue, count(patient_id) as total_patients
from doctor_patients
group by DoctorName
order by total_patients, total_revenue desc limit 5 ;


select * from hospital_data;

with cte as (select department_referral as department, date_format(date, "%Y-%m") as year_month_format,
avg(patient_waittime) as average_waiting_time
 from hospital_data
 group by department_referral, date_format(date, "%Y-%m")),
fir_prev as ( select department, year_month_format, average_waiting_time, 
 Lag(average_waiting_time) over(partition by department order by year_month_format) as first_prev
 from cte),
 sec_prev as ( select department, year_month_format, average_waiting_time, first_prev,
 Lag(first_prev) over(partition by department order by year_month_format) as second_prev
 from fir_prev),
three_prev as ( select department, year_month_format, average_waiting_time, first_prev, second_prev,
 Lag(second_prev) over(partition by department order by year_month_format) as third_prev
 from sec_prev)
 select * from three_prev
where   first_prev > second_prev and second_prev>third_prev
order by year_month_format; 



with gender_count as (select DoctorName, sum(case when patient_gender = "M" then 1 else 0 end) as male_count,
sum(case when patient_gender = "F" then 1 else 0 end) as female_count from doctor_patients d 
inner join hospital_data h on h.patient_id = d.patient_id
group by DoctorName)

select DoctorName, male_count, female_count, round(male_count/female_count,2) as male_female_ratio,
dense_rank() over(order by round(male_count/female_count,2) desc) as ranks
from gender_count
order by ranks;


select * from doctor_patients;
select * from hospital_data;

select DoctorName, coalesce(patient_sat_score,0) as sat_patient_score from hospital_data h 
inner join doctor_patients d on  
d.patient_id = h.patient_id;

select DoctorName, round(avg(case when patient_sat_score = "" then 5 else patient_sat_score end ),2) as sat_patient_score 
from hospital_data h inner join doctor_patients d on 
d.patient_id = h.patient_id group by DoctorName
order by sat_patient_score desc;

select DoctorName, count(distinct patient_race) as different_races
from hospital_data h inner join doctor_patients d on 
d.patient_id = h.patient_id group by DoctorName
order by different_races desc;

select d.department_referral as department,
sum(case when patient_gender = "M" then TotalBill end) as male_total_bill,
sum(case when patient_gender = "F" then TotalBill end) as female_total_bill,
round((sum(case when patient_gender = "M" then TotalBill end) / sum(case when patient_gender = "F" then TotalBill end)),2) as M_F_ratio
from hospital_data h inner join doctor_patients d on 
d.patient_id = h.patient_id 
group by d.department_referral order by M_F_ratio desc;

update hospital_data 
set patient_sat_score = least(patient_sat_score+2,10)
where department_referral = 'General Practice'
and patient_waittime>30;

select * from hospital_data;











